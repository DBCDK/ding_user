<?php

/**
 * @file
 * Ding user handling module.
 */
/**
 * Default seconds to cache user credentials before wiping them.
 */
define('DING_USER_DEFAULT_CREDS_LIFETIME', 900);


/**
 * Implements hook_menu().
 */
function ding_user_menu() {
  $items['admin/config/ding/user'] = array(
    'title' => 'Ding user',
    'description' => 'Ding user settings : Timeout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_user_lifetime'),
    'access arguments' => array('administer search'),
    'file' => 'ding_user.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_init().
 *
 * Check if the user's session has timed out, and update timeout if ding_user_creds_lifetype = 'refresh'.
 */
function ding_user_init() {
  global $user, $is_https;


  if (variable_get('securepages_enable', 0) && basename($_SERVER['PHP_SELF']) == 'index.php' && php_sapi_name() != 'cli' && !$is_https) {
    return;
  }

  //Fix for user reset
  if (isset($_GET['pass-reset-token']) || (isset($_POST['form_id']) && $_POST['form_id'] == 'user_pass_reset')) {
    return;
  }
  global $user;
  if (!ding_user_is_provider_user($user)) {
    return true;
  }

  try {
    $creds = ding_user_get_creds();
    if (variable_get('ding_user_creds_lifetype', 'initial') == 'refresh') {
      $auth_res['creds'] = $creds;
      ding_user_save_creds($auth_res, $user); // NB: also resets cache->created
    }
  } catch (DingProviderTimeoutException $e) {
    ding_user_timeout_msg();
  } catch (DingProviderAuthException $e) {
    // Anonymous user
  }
}


/**
 * Access callback.
 *
 * Allows access if the account is the same as the logged in user.
 */
function ding_user_access($account) {
  return ($GLOBALS['user']->uid == $account->uid) && $account->uid > 0;
}

/**
 * Implements hook_cron().
 */
function ding_user_cron() {
  // Clear out expired credentials.
  cache_clear_all(NULL, 'cache_ding_user_credentials');
}

/**
 * Implements hook_form_alter().
 *
 * Modify user login form to use our backend.
 */
function ding_user_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      // Add our own validation handler, after the default Drupal login
      // validator.
      $pos = array_search('user_login_authenticate_validate', $form['#validate']);
      if ($pos === FALSE) {
        // Not found, insert as next to last.
        $pos = sizeof($form['#validate']) - 1;
      }
      else {
        // After, not before.
        $pos += 1;
      }
      array_splice($form['#validate'], $pos, 0, 'ding_user_user_login_validate');
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() (user_profile_form).
 *
 * For provider users, hide OG, Drupal password, and add in a pincode field.
 */
function ding_user_form_user_profile_form_alter(&$form, &$form_state) {
  if (ding_user_is_provider_user($form_state['user'])) {
    // Don't show og group.
    // @todo: shouldn't this be elsewhere?
    $form['group_audience']['#access'] = FALSE;

    // Don't show Drupal password. We don't use it.
    $form['account']['current_pass']['#access'] = FALSE;
    $form['account']['pass']['#access'] = FALSE;

    // Add pincode change field. Defaults to 4 chars, as that seems the common
    // option, providers may form_alter this.
    $form['account']['pass'] = array(
      '#type' => 'password_confirm',
      '#size' => 4,
      '#maxlength' => 4,
      '#process' => array(
        'form_process_password_confirm',
        // Not adding user_form_process_password_confirm here, as it only adds
        // the strength checker, which we don't want.
        'ding_user_form_process_password_confirm',
      ),
      '#description' => t('To change the current pincode, enter the new pincode in both fields.'),
    );

    // Adjust description of mail field.
    $form['account']['mail']['#description'] = t('The e-mail address is not made public and will only be used if you wish to receive certain news or notifications by e-mail.');

    // Remove the validator requiring the current password to change email
    // address.
    $pos = array_search('user_validate_current_pass', $form['#validate']);
    if ($pos !== FALSE) {
      unset($form['#validate'][$pos]);
    }
  }
  else {
    $form['account']['pass'] = array(
      '#type' => 'password_confirm',
      '#size' => 4,
      '#maxlength' => 4,
      '#process' => array(
        'form_process_password_confirm',
        // Not adding user_form_process_password_confirm here, as it only adds
        // the strength checker, which we don't want.
        'ding_user_form_process_password_confirm',
      ),
      '#description' => t('To change the current pincode, enter the new pincode in both fields.'),
    );
  }
}

/**
 * Password confirm element process.
 *
 * Add in handling of #maxlength and change the titles of the fields.
 */
function ding_user_form_process_password_confirm($element) {
  if (!empty($element['#maxlength'])) {
    $element['pass1']['#maxlength'] = $element['pass2']['#maxlength'] = $element['#maxlength'];
    // Unset #maxlength, or _form_validate will attempt to check the length of
    // this element, whose value will be an array.
    unset($element['#maxlength']);
  }
  // Fixup the titles.
  $element['pass1']['#title'] = t('Pincode');
  $element['pass2']['#title'] = t('Confirm pincode');

  return $element;
}


/**
 * Implements hook_user_presave().
 *
 * Update provider with changes to email/pass.
 */
function ding_user_user_presave(&$edit, $account, $category) {
  // Ensure that we're dealing with a provider user.
  if (empty($account->uid) || !ding_user_is_provider_user($account)) {
    return;
  }

  $changes = array();
  if (isset($edit['mail']) && $edit['mail'] != $account->mail) {
    $changes['mail'] = $edit['mail'];
  }
  // If pincode is not empty, it's changed.
  if (!empty($edit['pincode'])) {
    $changes['pass'] = $edit['pincode'];
    // Unset it, so it doesn't get saved.
    unset($edit['pincode']);
  }
  if (!empty($changes)) {
    try {
      $update_res = ding_provider_invoke('user', 'account_update', $account, $changes);
      if (!empty($update_res['creds'])) {
        ding_user_save_creds($update_res, $account);
      }
    }
    catch (Exception $e) {
      // If update_account fails, we're in trouble, as we're too far in to
      // set form errors. So we'll just tell the user that it couldn't be, and
      // not save the fields.
      drupal_set_message(t('There was a problem communicating with library system. Please contact the site administrator.', array(), array('context' => 'ding_user')), 'error');
      watchdog_exception('ding_user', $e);
      if (isset($changes['mail'])) {
        drupal_set_message(t('Email not saved.', array(), array('context' => 'ding_user')), 'error');
        // Don't save a new email address.
        unset($edit['mail']);
      }
      if (isset($changes['pass'])) {
        drupal_set_message(t('New pincode not saved.', array(), array('context' => 'ding_user')), 'error');
        // Pass was already unset.
      }
    }
  }
}

/**
 * Implements hook_user_logout().
 *
 * Lets user stays on page, after logout.
 */
function ding_user_user_logout($account) {
  // Ensure the credentials is removed from cache.
  cache_clear_all(session_name() . '-' . $account->uid, 'cache_ding_user_credentials');
}

/**
 * Implements hook_username_alter().
 *
 * Use display_name.
 */
function ding_user_username_alter(&$name, $account) {
  if (isset($account->data)) {
    if (is_string($account->data)) {
      $data = unserialize($account->data);
    }
    else {
      $data = $account->data;
    }

    if (!empty($data) && isset($data['display_name'])) {
      $name = $data['display_name'];
    }
  }
}

/**
 * Implements hook_ding_provider_user().
 */
function ding_user_ding_provider_user() {
  return array(
    'user' => array(
      'required' => TRUE,
      'install time setup' => TRUE,
    ),
  );
}

/**
 * Return a local hash for the given name.
 *
 * As logins may be CPR numbers, which is really sensitive information, we use
 * a hash of the name and the Drupal private key as authname.
 */
function ding_user_default_authname($name) {
  // If another password.inc is in use, that doesn't define
  // _password_base64_encode(), we'll fail horribly. We'll probably need to
  // define our own base64 function, but we'll cross that bridge when we reach
  // it.
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
  /**
   * A sha512 is 64 bytes, which becomes 128 hexadecimal chars, which is
   * exactly the size of the authname field in the database. So we ask hash
   * for binary data and lets _password_base64_encode base64 encode it to 86
   * characters, leaving enough room for our suffix.
   */
  $hash = hash('sha512', drupal_get_private_key() . $name, TRUE);
  return _password_base64_encode($hash, strlen($hash)) . '@ding_user';
}

/**
 * Custom validator for the login form.
 *
 * Handles authentication with provider, and setting up a profile2 for the
 * user/provider.
 */
function ding_user_user_login_validate($form, &$form_state) {
  // If $form_state['uid'] is set and has a true value, Drupal already found a
  // user, so we don't bother. Also, we require name and pass.
  if (isset($form_state['uid']) && $form_state['uid'] || empty($form_state['values']['name']) || empty($form_state['values']['pass'])) {
    return;
  }
  try {
    $authentication_provider = !empty($form_state['values']['authentication_provider']) ? $form_state['values']['authentication_provider'] : 'user';
    $auth_res = ding_provider_invoke($authentication_provider, 'authenticate', $form_state['values']['name'], $form_state['values']['pass']);
    if (!is_array($auth_res) || !isset($auth_res['success'])) {
      watchdog('ding_user', 'Provider returned invalid result: @res', array('@res' => print_r($auth_res, TRUE)), WATCHDOG_DEBUG);
      return;
    }

    if ($auth_res['success']) {
      if (isset($auth_res['authname']) && !empty($auth_res['authname'])) {
        // If provider supplied an authname, use it.
        $auth_name = $auth_res['authname'];
      }
      else {
        // Else use a standard authname.
        $auth_name = ding_user_default_authname($form_state['values']['name']);
      }
      $account = _ding_user_create_account($auth_name, $auth_res);
      // Save credentials for later. Do it early as the provider might expect
      // them in a hook_profile2_presave hook trigged by us saving a new
      // profile, or themselves in the profile_init callback.
      ding_user_save_creds($auth_res, $account);

      if (isset($form_state['mail_me'])) {
        if (ding_provider_implements('user', 'mail_me')) {
          ding_provider_invoke('user', 'mail_me', $form_state['mail_me'], $account);
        }
      }
      // Log user in.
      $form_state['uid'] = $account->uid;
    }
    else {
      if (isset($auth_res['messages'])) {
        foreach ($auth_res['messages'] as $message) {
          if (is_array($message)) {
            list($message, $type) = $message;
          }
          else {
            $type = 'warning';
          }
          drupal_set_message(t($message, array(), array('context' => 'ding_user')), $type);
        }
      }
    }
  }
  catch (Exception $e) {
    // Exception thrown, log error and carry on.
    watchdog('ding_user', 'Provider exception, message: @message', array('@message' => $e->getMessage()), WATCHDOG_ERROR);
  }
}

/**
 * Return the page to redirect user to in order to authenticate/log
 * in. Used by ding_provider.
 */
function ding_user_auth_page() {
  global $user;
  if ($user->uid > 0) {
    return 'user/' . $user->uid . '/authenticate';
  }
  return 'user/login';
}

/**
 * Create a provider account for drupal. Username will be a hashvalue of authname.
 * This account will be coupled with the provider user via the authmap table
 * */
function _ding_user_create_account($auth_name, $auth_res) {
  // We'd like to use user_external_login_register(), but it saves the user
  // and invokes hook_user_login before we have a chance to mess with it. So
  // we do what it would do.
  $account = user_external_load($auth_name);
  if (!$account) {
    // Register this new user.
    $userinfo = array(
      // Name is only 60 chars, and authname is longer. Use a shorter SHAE1
      // hash.
      'name' => hash('sha1', $auth_name),
      'pass' => user_password(),
      'init' => $auth_name,
      'status' => 1,
      'access' => REQUEST_TIME,
      'mail' => $auth_name,
    );

    if (isset($auth_res['user'])) {
      $userinfo = array_merge($userinfo, $auth_res['user']);
    }

    $account = user_save(drupal_anonymous_user(), $userinfo);
    // Terminate if an error occurred during user_save().
    if (!$account) {
      drupal_set_message(t('Error saving user account.', array(), array('context' => 'ding_user')), 'error');
      return;
    }
    user_set_authmaps($account, array("authname_ding_user" => $auth_name));
  }
  else {
    ding_user_update_user($auth_res, $account);
  }
  return $account;
}

/**
 * Return cached creds for a user.
 *
 * Throws DingProviderAuthException if not authenticated.
 *
 * @param $account Array user to get creds for.
 * @throws DingProviderTimeoutException
 * @throws DingProviderAuthException
 * @return bool|mixed
 */
function ding_user_get_creds($account = NULL) {
  if (!$account) {
    $account = $GLOBALS['user'];
  }
  if ($cache = cache_get(session_name() . '-' . $account->uid, 'cache_ding_user_credentials')) {
    // dpm(date(DATE_RFC822 , $cache->created) . ' : ' . date(DATE_RFC822 , $cache->expire) );
    // Check that the credentials is valid.
    // note: Only the Alma provider implements 'is_authenticated', and it simply checks if login and password is set.
    //       So: If the user is cached, $cache->data is returned in any case.
    if (ding_provider_implements('user', 'is_authenticated')) {
      if (ding_provider_invoke('user', 'is_authenticated', $cache->data)) {
        return $cache->data;
      }
    }
    else {
      return $cache->data;
    }
  }

  $roles = array_values($GLOBALS['user']->roles);

  // Log out user who are authenticated but has no other roles (i.e. ding user)
  if (user_is_logged_in() && sizeof($roles) == 1 && $roles[0] == 'authenticated user') {
    // unless we're using persistent login, and they have a persistent login cookie.
    if (module_exists('ding_persistent_login') && $creds = ding_persistent_login_get_creds($account->uid)) {
      return $creds;
    }
    watchdog('user', 'Session timeout for %name.', array('%name' => $account->name));
    user_module_invoke('logout', $account, 'user'); // invoke hook_user_logout()
    session_destroy();
    $GLOBALS['user'] = drupal_anonymous_user();
    // drupal_goto(); // drupal_goto() mess up AJAX responses if timed out.

    throw new DingProviderTimeoutException;
  }

  throw new DingProviderAuthException;
}

/**
 * Set timeout messages.
 */
function ding_user_timeout_msg() {
  global $language;
  $lang_path = (!empty($language->prefix)) ? $language->prefix . '/' : '';
  $message = t('Your session has timed out.', array(), array('context' => 'ding_user'));
  drupal_set_message($message, 'status');
  // catch timeout on AJAX in forms
  if (current_path() == 'system/ajax') {
    $commands[] = ajax_command_alert($message);
    $output = '<a href="' . $GLOBALS['base_path'] . $lang_path . 'user/login">' . t('Log in') . '</a>';
    $path = $GLOBALS['base_path'] . $lang_path . 'user/logout';
    $commands[] = ajax_command_replace('a[href="' . $path . '"]', $output);
    $callback = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($callback);
    drupal_exit();
  }
  else {
    // catch timeout everything else.
    drupal_add_js(
        drupal_get_path('module', 'ding_user') . '/js/user_timeout.js', array(
      'every_page' => FALSE,
      'group' => JS_DEFAULT,
      'cache' => FALSE,
      'weight' => 100,
        )
    );
  }
}

/**
 * Update account with information from provider.
 */
function ding_user_update_user($auth_res, &$account) {
  foreach ($auth_res['user'] as $key => $value) {
    if ($key == 'data') {
      // Special handling for data array. We're using == as ===
      // also checks order, and we don't need the extra type
      // check.
      if ($account->$key == $value) {
        unset($auth_res['user'][$key]);
      }
    }
    elseif (isset($account->$key) && $account->$key === $value) {
      unset($auth_res['user'][$key]);
    }
  }
  if (!empty($auth_res['user'])) {
    // Save account if there's any changes.
    $account = user_save($account, $auth_res['user']);
  }
}

/**
 * Cache user creds locally.
 */
function ding_user_save_creds($auth_res, $account) {
  if (isset($auth_res['creds'])) {
    cache_set(session_name() . '-' . $account->uid, $auth_res['creds'], 'cache_ding_user_credentials', REQUEST_TIME + variable_get('ding_user_creds_lifetime', DING_USER_DEFAULT_CREDS_LIFETIME));
  }
  // also update persistent login, if installed.
  if (module_exists('ding_persistent_login')) {
    ding_persistent_login_save_creds($account->uid, $auth_res['creds']);
  }
}

/**
 * Check if the given account is a user authenticated through a provider.
 */
function ding_user_is_provider_user($account=NULL) {
  if(!isset($account)) {
    global $user;
    $account = $user;
  }
  static $uid;
  static $names;
  if (!isset($uid) || $uid != $account->uid) {
    $names = db_select('authmap')
      ->fields('authmap', array('authname'))
      ->condition('module', 'ding_user')
      ->condition('uid', $account->uid)
      ->execute()->fetchAll();
    $uid = $account->uid;
  }
  return !empty($names);
}

include_once('ding_user_comments.inc');

/**
 * Implementing specific cache for DingUserCredentials due to the fact that
 * entity module renders all non-permanent cache invalid when calling
 * cache_clear_all. It is only necessary to override prepareItem metode because
 * we need it to check against expire timestamp instead of created timestamp.
 */
class DingUserCredentialsCache extends DrupalDatabaseCache {

  /**
   * @param $cids
   * @return array
   */
  function getMultiple(&$cids) {
    try {
      // Garbage collection necessary when enforcing a minimum cache lifetime.
      $this->garbageCollection($this->bin);

      // When serving cached pages, the overhead of using db_select() was found
      // to add around 30% overhead to the request. Since $this->bin is a
      // variable, this means the call to db_query() here uses a concatenated
      // string. This is highly discouraged under any other circumstances, and
      // is used here only due to the performance overhead we would incur
      // otherwise. When serving an uncached page, the overhead of using
      // db_select() is a much smaller proportion of the request.
      $result = db_query('SELECT cid, data, created, expire, serialized FROM {' . db_escape_table($this->bin) . '} WHERE cid IN (:cids)', array(':cids' => $cids));
      $cache = array();
      foreach ($result as $item) {
        $item = $this->prepareItem($item);
        if ($item) {
          $cache[$item->cid] = $item;
          if (variable_get('ding_user_creds_lifetype', 'initial') == 'refresh') {
            // postpone expire ding user credentials
            db_update($this->bin)
              ->fields(array('expire' => REQUEST_TIME + variable_get('ding_user_creds_lifetime', DING_USER_DEFAULT_CREDS_LIFETIME),))
              ->condition('cid', $item->cid)
              ->execute();
          }
        }
      }
      $cids = array_diff($cids, array_keys($cache));
      return $cache;
    }
    catch (Exception $e) {
      // If the database is never going to be available, cache requests should
      // return FALSE in order to allow exception handling to occur.
      return array();
    }
  }

  /**
   * Prepare a cached item.
   *
   * Checks that items are either permanent or did not expire, and unserializes
   * data as appropriate.
   *
   * @param $cache
   *   An item loaded from cache_get() or cache_get_multiple().
   * @return bool The item with data unserialized as appropriate or FALSE if there is no
   */
  protected function prepareItem($cache) {
    global $user;

    if (!isset($cache->data)) {
      return FALSE;
    }
    if ($cache->expire != CACHE_PERMANENT && REQUEST_TIME > $cache->expire) {
      // This cache data is too old and thus not valid for us, ignore it.
      return FALSE;
    }

    if ($cache->serialized) {
      $cache->data = unserialize($cache->data);
    }

    return $cache;
  }

}
